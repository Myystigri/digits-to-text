{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","chunkString","str","len","_offset","_size","Math","ceil","length","_ret","Array","_i","substring","split","reverse","join","App","useState","digits","setDigits","translation","setTranslation","useEffect","parseInt","chunked","reverseString","actualTranslation","chunkPosition","chunk","reversedChunk","position","chunkTranslation","digit","charAt","digitToText","thousandth","getThousandth","translationLength","string","toString","reversedDigits","text","nextDigit","lastDigit","className","src","logo","alt","type","value","onChange","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9faf7aa8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2eff2ebc.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n    const [digits, setDigits] = useState('');\n    const [translation, setTranslation] = useState('Entrez un nombre');\n\n    useEffect(() => {\n        if (digits === '') {\n            setTranslation('Entrez un nombre');\n        } else if (parseInt(digits) === 0) {\n            setTranslation('zÃ©ro');\n        } else if (parseInt(digits) > 9007199254740992) {\n          setTranslation('Nombre trop grand');\n        } else {\n            const chunked = chunkString(reverseString(parseInt(digits)), 3);\n\n            let actualTranslation = '';\n            for (let chunkPosition = 0; chunkPosition < chunked.length; chunkPosition++) {\n                const chunk = chunked[chunkPosition];\n                const reversedChunk = reverseString(chunk);\n                let position = chunk.length;\n                let chunkTranslation = '';\n                if (parseInt(chunk) === 0) {\n                    chunkTranslation = '';\n                } else {\n                    while (position--) {\n                        let digit = reversedChunk.charAt(position);\n                        chunkTranslation += digitToText(digit, position, reversedChunk, chunkTranslation, chunkPosition);\n                    }\n\n                    if (chunkPosition !== 0) {\n                        const thousandth = getThousandth(chunkPosition);\n                        const append = ((chunkTranslation !== '' && chunkTranslation[chunkTranslation.length - 1] !== '-') ? '-' : '') + thousandth + ((actualTranslation !== '') ? '-' : '');\n                        chunkTranslation += append;\n                    }\n                }\n\n                actualTranslation = chunkTranslation += actualTranslation;\n            }\n            const translationLength = actualTranslation.length;\n            if (actualTranslation[translationLength - 1] === '-') actualTranslation = actualTranslation.substring(0, translationLength - 1);\n\n            setTranslation(actualTranslation);\n        }\n    }, [digits]);\n\n    const handleChange = (event) => {\n        setDigits(event.target.value);\n    };\n\n    const reverseString = (string) => {\n        return (string.toString()).split(\"\").reverse().join(\"\");\n    };\n\n    const getThousandth = (position) => {\n        let thousandth;\n        switch (position) {\n            case 1:\n                thousandth = 'mille';\n                break;\n            case 2:\n                thousandth = 'million';\n                break;\n            case 3:\n                thousandth = 'milliard';\n                break;\n            case 4:\n                thousandth = 'billion';\n                break;\n            case 5:\n                thousandth = 'trillion';\n                break;\n            default:\n                thousandth = '';\n        }\n            return thousandth;\n    };\n\n    const digitToText = (digit, position, reversedDigits, actualTranslation, chunkPosition) => {\n        let text = '';\n        switch (position) {\n            case 0:\n                const nextDigit = parseInt(reversedDigits.charAt(position+1));\n                switch (parseInt(digit)) {\n                    case 0:\n                        text = '';\n                        break;\n                    case 1:\n                        if (nextDigit && (nextDigit !== 0 && nextDigit !== 1 && nextDigit !== 8 && nextDigit !== 9)) text = 'et-';\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text += 'onze';\n                        } else if (chunkPosition === 1) {\n                            text += '';\n                        } else text += 'un';\n                        break;\n                    case 2:\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text = 'douze';\n                        } else text = 'deux';\n                        break;\n                    case 3:\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text = 'treize';\n                        } else text = 'trois';\n                        break;\n                    case 4:\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text = 'quatorze';\n                        } else text = 'quatre';\n                        break;\n                    case 5:\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text = 'quinze';\n                        } else text = 'cinq';\n                        break;\n                    case 6:\n                        if (nextDigit && (nextDigit === 1 || nextDigit === 7 || nextDigit === 9)) {\n                            text = 'seize';\n                        } else text = 'six';\n                        break;\n                    case 7:\n                        text = 'sept';\n                        break;\n                    case 8:\n                        text = 'huit';\n                        break;\n                    case 9:\n                        text = 'neuf';\n                        break;\n                    default:\n                        text = '';\n                }\n                break;\n            case 1:\n                const lastDigit = parseInt(reversedDigits.charAt(position-1));\n                switch (parseInt(digit)) {\n                    case 0:\n                        text = '';\n                        break;\n                    case 1:\n                        if (lastDigit && (lastDigit > 0 && lastDigit < 7)) {\n                            text = '';\n                        } else text = 'dix-';\n                        break;\n                    case 2:\n                        text = 'vingt-';\n                        break;\n                    case 3:\n                        text = 'trente-';\n                        break;\n                    case 4:\n                        text = 'quarante-';\n                        break;\n                    case 5:\n                        text = 'cinquante-';\n                        break;\n                    case 6:\n                        text = 'soixante-';\n                        break;\n                    case 7:\n                        if (lastDigit && (lastDigit > 0 && lastDigit < 7)) {\n                            text = 'soixante-';\n                        } else text = 'soixante-dix-';\n                        break;\n                    case 8:\n                        text = 'quatre-vingt-';\n                        break;\n                    case 9:\n                        if (lastDigit && (lastDigit > 0 && lastDigit < 7)) {\n                            text = 'quatre-vingt-';\n                        } else text = 'quatre-ving-dix-';\n                        break;\n                    default:\n                        text = '';\n                }\n                break;\n            case 2:\n                switch (parseInt(digit)) {\n                    case 0:\n                        text = '';\n                        break;\n                    case 1:\n                        text = 'cent-';\n                        break;\n                    case 2:\n                        text = 'deux-cent-';\n                        break;\n                    case 3:\n                        text = 'trois-cent-';\n                        break;\n                    case 4:\n                        text = 'quatre-cent-';\n                        break;\n                    case 5:\n                        text = 'cinq-cent-';\n                        break;\n                    case 6:\n                        text = 'six-cent-';\n                        break;\n                    case 7:\n                        text = 'sept-cent-';\n                        break;\n                    case 8:\n                        text = 'huit-cent-';\n                        break;\n                    case 9:\n                        text = 'neuf-cent-';\n                        break;\n                    default:\n                        text = '';\n                }\n                break;\n            default:\n                text = '';\n        }\n        return text;\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <input type=\"number\" value={digits} onChange={handleChange}/>\n                <p className=\"App-translation\">{translation}</p>\n            </header>\n        </div>\n    );\n};\n\nconst chunkString = (str, len) => {\n    const _size = Math.ceil(str.length/len),\n        _ret  = new Array(_size);\n    let _offset;\n\n    for(let _i=0; _i<_size; _i++) {\n        _offset = _i * len;\n        _ret[_i] = (str.substring(_offset, _offset + len)).split(\"\").reverse().join(\"\");\n    }\n\n    return _ret;\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}